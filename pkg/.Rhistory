result_eqs_gurobi <- solve(prob_eqs, solver = 'GUROBI')
###################################################################################
rm(list = ls())
library(CVXR)
library(xts)
library(kableExtra)
load('C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\PCRM\\smallcapM.rda')
returns <- smallcapM[, 1:10]
n <- ncol(returns)
mean_ret <- apply(returns, 2, mean)
mean_ret <- matrix(mean_ret, nrow = n)
Sigma <- cov(returns)
# Long only GMV
## Form problem
wts <- Variable(n)
ret <- t(mean_ret) %*% wts
risk <- quad_form(wts, Sigma)
constraints <- list(wts >= 0, sum(wts) == 1)
objective <- risk
prob <- Problem(Minimize(objective), constraints)
gmv_result <- solve(prob)
gmv_wts <- gmv_result$getValue(wts)
gmv_wts <- t(gmv_wts)
colnames(gmv_wts) <- colnames(returns)
## Evaluate risk/return for current solution
gmv_risk <- gmv_result$getValue(sqrt(risk))
gmv_ret <- gmv_result$getValue(ret)
# GMES
alpha <- 0.95
n <- ncol(returns)
t <- nrow(returns)
X <- as.matrix(returns)
mu <- colMeans(returns)
# variables
wts <- Variable(n)
z <- Variable(t)
zeta <- Variable(1)
# Objective
objective_es <- zeta + (1/(t*(1-alpha))) * sum(z)
# problem
prob_es <- Problem(Minimize(objective_es),
constraints = list(z >= 0,
z >= -X %*% wts - zeta,
wts >= 0, sum(wts) == 1))
# Using default solver
result_es <- solve(prob_es)
es_wts <- result_es$getValue(wts)
## Evaluate risk/return for current solution
gmes_ret <- mean(returns %*% es_wts)
gmes_VaR <- result_es$getValue(zeta)
gmes_ES <- result_es$value
# EQS
alpha <- 0.95
t <- nrow(returns)
n <- ncol(returns)
X <- as.matrix(returns)
mu <- colMeans(returns)
# variables
wts <- Variable(n)
z <- Variable(t)
zeta <- Variable(1)
# Objective
objective_eqs <- zeta + (1/(1-alpha)) * p_norm(z, p=2)
# problem
prob_eqs <- Problem(Minimize(objective_eqs),
constraints = list(z >= 0,
z >= -X %*% wts - zeta,
wts >= 0, sum(wts) == 1))
result_eqs <- solve(prob_eqs)
eqs_wts <- result_eqs$getValue(wts)
## Evaluate risk/return for current solution
gmeqs_ret <- mean(returns %*% eqs_wts)
result_eqs$value
# Combine all portfolio returns and risk
portf_ret <- c(gmv_ret, gmes_ret, gmeqs_ret)
portf_risk <- c(gmv_risk, gmes_risk, gmeqs_risk)
ret_risk_ratio <- portf_ret / portf_risk
ret_risk_perf <- cbind(portf_ret, portf_risk, ret_risk_ratio)
############################################################################
# Using the algo of Krokhmal paper
rm(list = ls())
# library(PCRM)
library(CVXR)
load('C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\PCRM\\smallcapM.rda')
returns <- smallcapM[,1:10]
# EQS
alpha <- 0.95
J <- nrow(returns)
n <- ncol(returns)
X <- as.matrix(returns)
mu <- colMeans(returns)
p <- 2
# variables
wts <- Variable(n)
z <- Variable(J)
t <- Variable(1)
eta <- Variable(1)
# Objective
objective_eqs <- eta + (1/(1-alpha)) * (J^(-1/p))*t
# problem
prob_eqs <- Problem(Minimize(objective_eqs),
constraints = list(z >= 0,
z >= -X %*% wts - eta,
wts >= 0, sum(wts) == 1,
t >= p_norm(z, p=2))
)
result_eqs <- solve(prob_eqs)
eqs_wts <- result_eqs$getValue(wts)
cat("Status of the solution: ", result_eqs$status)
cat("Solver used: ", result_eqs$solver)
eqs_wts <- result_eqs$getValue(wts)
eqs_wts
result_eqs$value
eqs_wts1 = eqs_wts
round(cbind(eqs_wts, eqs_wts1), digits = 4)
install.packages(c("boot", "bootstrap"))
install.packages("rugarch")
rm(list=ls())
dir <- "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk"
setwd(dir)
# Load the necessary libraries for different packages
library(xts)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(foreach)
library(CVXR)
library(ggplot2)
source("C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\functions_ES_portf_optimize.R")
# load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_large_cap_weekly.RData")
# load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_micro_cap_weekly.RData")
load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_mid_cap_weekly.RData")
# returns <- crsp_large_cap
# returns <- crsp_micro_cap
returns <- crsp_mid_cap
dim(returns)
############################################################################
# Split mid cap into three equal sized groups
dim(returns)
# Group 1
ret_data <- returns[, 1:35, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 50,
rolling_window = 100)
############################################################################
# Split mid cap into three equal sized groups
dim(returns)
# Group 1
ret_data <- returns[, 1:35, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 100)
###################################################################################
asset_names <- colnames(returns)
training_period <- 100
rolling_window <- 100
rebalance_on <- "months"
alpha <- 0.95
# Global Minimum Variance
pspec_gmv <- portfolio.spec(assets = asset_names)
pspec_gmv <- add.constraint(pspec_gmv, type = "full_investment")
pspec_gmv <- add.constraint(pspec_gmv, type = "long_only")
# Portfolio with variance as an objective
pspec_gmv <- add.objective(pspec_gmv, type = "risk", name = "StdDev")
# Optimize Portfolio at Monthly Rebalancing
rebal_gmv <- optimize.portfolio.rebalancing(returns, pspec_gmv,
optimize_method = "ROI",
rebalance_on = rebalance_on,
training_period = training_period,
rolling_window = rolling_window,
trace = TRUE)
# Extract time series of portfolio weights
rebal_wts_gmv <- extractWeights(rebal_gmv)
# Compute returns of portfolio
rebal_gmv_ret <- Return.rebalancing(returns, rebal_wts_gmv)
rebal_wts_gmv
rebal_gmv
returns
training_period <- 120
rolling_window <- 100
rebalance_on <- "months"
alpha <- 0.95
# Global Minimum Variance
pspec_gmv <- portfolio.spec(assets = asset_names)
pspec_gmv <- add.constraint(pspec_gmv, type = "full_investment")
pspec_gmv <- add.constraint(pspec_gmv, type = "long_only")
# Portfolio with variance as an objective
pspec_gmv <- add.objective(pspec_gmv, type = "risk", name = "StdDev")
# Optimize Portfolio at Monthly Rebalancing
rebal_gmv <- optimize.portfolio.rebalancing(returns, pspec_gmv,
optimize_method = "ROI",
rebalance_on = rebalance_on,
training_period = training_period,
rolling_window = rolling_window,
trace = TRUE)
# Extract time series of portfolio weights
rebal_wts_gmv <- extractWeights(rebal_gmv)
# Compute returns of portfolio
rebal_gmv_ret <- Return.rebalancing(returns, rebal_wts_gmv)
############################################################################
# Split mid cap into three equal sized groups
dim(returns)
# Group 1
ret_data <- returns[, 1:35, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
dim(ret_data)
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
############################################################################
# Split mid cap into three equal sized groups
dim(returns)
ret_data <- returns[, 39:76, drop = FALSE]
dim(ret_data)
ret_data <- returns[, 36:70, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
ret_data <- returns[, 71:104, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
rm(list=ls())
# Load the necessary libraries for different packages
library(CVXR)
library(RColorBrewer)
library(xts)
library(lubridate)
#library(tidyverse)
library(ggplot2)
library(grid) # Useful package to set ggplot plots one next to the other
library(gridExtra)
load('C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\PCRM\\midcap.ts.rda')
returns <- midcap.ts[, 1:10]
n <- ncol(returns)
mu <- apply(returns, 2, mean)
mu <- matrix(mu, nrow = n)
rm(list=ls())
dir <- "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk"
setwd(dir)
# Load the necessary libraries for different packages
library(xts)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(foreach)
library(CVXR)
library(ggplot2)
source("C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\functions_ES_portf_optimize.R")
# load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_large_cap_weekly.RData")
# load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_micro_cap_weekly.RData")
# load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_mid_cap_weekly.RData")
load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_small_cap_weekly.RData")
# returns <- crsp_large_cap
# returns <- crsp_micro_cap
# returns <- crsp_mid_cap
returns <- crsp_small_cap
dim(returns)
# Split small cap (89 stocks) into three equal sized groups
dim(returns)
ret_data <- returns[, 1:30, drop = FALSE]
#ret_data <- returns[, 31:60, drop = FALSE]
#ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
# Split small cap (89 stocks) into three equal sized groups
dim(returns)
# ret_data <- returns[, 1:30, drop = FALSE]
ret_data <- returns[, 31:60, drop = FALSE]
#ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
# Split small cap (89 stocks) into three equal sized groups
dim(returns)
# ret_data <- returns[, 1:30, drop = FALSE]
# ret_data <- returns[, 31:60, drop = FALSE]
ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
rm(list=ls())
dir <- "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk"
setwd(dir)
# Load the necessary libraries for different packages
library(xts)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(foreach)
library(CVXR)
library(ggplot2)
source("C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\functions_ES_portf_optimize.R")
load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_large_cap_weekly.RData")
returns <- crsp_large_cap
dim(returns)
# Split large cap (76 stocks) into three equal sized groups
dim(returns)
# ret_data <- returns[, 31:60, drop = FALSE]
# ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
ret_data <- returns[, 1:38, drop = FALSE]
# ret_data <- returns[, 31:60, drop = FALSE]
# ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
ret_data <- returns[, 1:25, drop = FALSE]
# ret_data <- returns[, 31:60, drop = FALSE]
# ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
# Split large cap (76 stocks) into three equal sized groups
dim(returns)
# ret_data <- returns[, 1:25, drop = FALSE]
ret_data <- returns[, 26:50, drop = FALSE]
# ret_data <- returns[, 61:89, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
# Split large cap (76 stocks) into three equal sized groups
dim(returns)
# ret_data <- returns[, 1:25, drop = FALSE]
# ret_data <- returns[, 26:50, drop = FALSE]
ret_data <- returns[, 51:76, drop = FALSE]
dim(ret_data)
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
rm(list=ls())
dir <- "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk"
setwd(dir)
# Load the necessary libraries for different packages
library(xts)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(foreach)
library(CVXR)
library(ggplot2)
source("C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\functions_ES_portf_optimize.R")
# load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_large_cap_weekly.RData")
load(file = "C:\\GoogleDrivePushpakUW\\Spillover\\Copula\\Optimization_Tail_Risk\\Data\\CRSP\\crsp_micro_cap_weekly.RData")
# returns <- crsp_large_cap
returns <- crsp_micro_cap
dim(returns)
# Micro cap (31 stocks) - one group
ret_data <- returns
cumret_comb <- optimize_portf_rebalance(returns = ret_data, rebalance_on = "months",
alpha = 0.95, training_window = 100,
rolling_window = 150)
charts.PerformanceSummary(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb),
colorset = 1:ncol(cumret_comb), legend.loc = "topleft",
cex.legend = 0.7, cex.axis = 0.7, main = "")
chart.CumReturns(cumret_comb, wealth.index = TRUE,
lty = 1:ncol(cumret_comb), legend.loc = "topleft",
colorset = 1:ncol(cumret_comb),
main = "Cumulative portfolio returns", main.cex = 0.5)
chart.Drawdown(cumret_comb, lty = 1:ncol(cumret_comb), legend.loc = "bottomleft",
colorset = 1:ncol(cumret_comb), main = "Drawdown")
rm(list = ls())
library(xts)
dir <- "C:\\GoogleDrivePushpakUW\\FX\\FX-ML\\Rscripts"
setwd(dir)
source("fx_ml_functions.R")
###################################### Australia ###################################
## OOS rolling
# macro
input_dir <- "C:\\GoogleDrivePushpakUW\\FX\\FX-ML\\Data\\Output\\Australia\\OOS_rolling\\macro\\"
output_dir <- "C:\\GoogleDrivePushpakUW\\FX\\FX-ML\\Data\\Output\\Australia\\OOS_rolling\\"
ensemble_file_name <- "rolling_macro_ensemble.csv"
get_ensemble_forecast(input_folder = input_dir, output_folder = output_dir,
output_file_name = ensemble_file_name)
rm(list = ls())
setwd('C:\Users\Pushpak Sarkar\Dropbox\FinBook\IntroCompFinR\pkg\')
setwd('C:\\Users\\Pushpak Sarkar\\Dropbox\\FinBook\\IntroCompFinR\pkg\\')
setwd('C:\\Users\\Pushpak Sarkar\\Dropbox\\FinBook\\IntroCompFinR\pkg')
setwd('C:\\Users\\Pushpak Sarkar\\Dropbox\\FinBook\\IntroCompFinR\\pkg\\')
ls()
install.packages("IntroCompFinR_1.0.tar.gz", repos=NULL, type="source")
data(package = 'IntroCompFinR')
data(amznDailyPrices2020)
library(IntroCompFinR)
data(amznDailyPrices2020)
head(amznDailyPrices2020)
head(amznDailyPrices2020)
tail(amznDailyPrices2020)
plot.zoo(amznDailyPrices2020)
plot.xts(amznDailyPrices2020)
